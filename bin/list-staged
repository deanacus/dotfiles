#!/usr/bin/env node

const getStagedFiles = async () => shell('git diff --staged --diff-filter=ACMR --name-only');

const stashCurrentChanges = async () => shell('git stash -u');

const lint = async (files) => shell('eslint -c config -f ...files')

const format = async (files) => shell('prettier --write ...files');

const test = async (files) => shell('jest ...files');

const typeCheck = async (files) => shell('tsc --noEmit ...files');

const restoreCurrentChanges = async () => shell('git stash pop')

const doHook = () => {
  await stashCurrentChanges();
  const files = await getStagedFiles();
  const scriptFiles = files.filter(file => file.contains('.{js|jsx|ts|tsx}'))
  const tsFiles = scriptFiles.filter(file => file.contains('.{ts|tsx}'))
  const testFiles = scriptFiles.filter(file => file.contains('.{spec|test}'));

  const passedLinting = await lint(scriptFiles);
  const passedFormatting = await format(scriptFiles);
  const passedTypeValiation = await typeCheck(tsFiles);
  const passedTests = await test(testFiles);

  await restoreCurrentChanges();
  const failedTasks = [];

  if (!passedLinting) {
    failedTasks.push('Lint');
  }

  if (!passedFormatting) {
    failedTasks.push('Format');
  }

  if (!passedTypeValiation) {
    failedTasks.push('Type Check');
  }

  if (!passedTests) {
    failedTasks.push('Test');
  }

  if (failedTasks.length) {
    console.log('Pre-commit hook failed on:' + failedTasks.join('\n  * '))
  }

  process.exit(failedTasks.length)
}