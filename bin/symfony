#!/usr/bin/env node

const { homedir } = require('os');
const { spawn } = require('child_process');
const { readdir, truncate } = require('fs/promises');

const installDir = `${homedir()}/dev/rpt/symfony`;

const symbols = {
  success: '✔',
  error: '✖',
  info: 'ℹ',
  warning: '⚠',
  tick: '✔',
};

const handleError = (message, error) => {
  if (error) {
    console.error(error.stack);
  }
  process.stderr.write(`${symbols.error} ${message}`);
  process.exit(2);
};

const success = (message) => {
  process.stdout.write(`${symbols.tick} ${message}\n`);
};

const echo = (message) => {
  process.stdout.write(`${message}\r`);
};

const truncateDir = async (dir, ext) => {
  try {
    const files = await readdir(dir);
    await Promise.all(
      files.map(async (file) => {
        try {
          truncate(`${dir}${file}`);
        } catch (error) {
          handleError(`Error clearing ${dir}/${file}`, error);
        }
      }),
    );
    return true;
  } catch (error) {
    handleError(`Error clearing ${dir}`, error);
  }
};

const exec = (command, args) =>
  new Promise((resolve, reject) => {
    const task = spawn(command, args, {
      stdio: ['pipe', 'ignore', 'pipe'],
      cwd: installDir,
    });

    task.stderr.on('data', (data) => {
      console.error(`${data}`);
    });

    task.on('close', (code, signal) => {
      if (code) {
        handleError(
          `An error has occurred during ${command} ${args.join(
            ' ',
          )}. Exit code: ${code}`,
        );
        reject();
      }
      resolve(code);
    });

    task.on('error', (error) => {
      handleError('An error has occurred', error);
      reject(error);
    });
  });

const install = async (subcommand) => {
  switch (subcommand) {
    case 'js':
    case 'javascript':
      echo('Install NPM Packages');
      await exec('npm i');
      success(`Install NPM Packages`);
      break;
    case 'php':
    case 'symfony':
      echo('Install Composer Packages');
      await exec('composer install');
      success(`Install Composer Packages`);
      break;
    case 'assets':
      echo('Install Bundled Assets');
      await exec('php', ['bin/console', 'assets:install']);
      success(`Succefully completed install ${subcommand}`);
      break;
    case 'db':
    case 'database':
      echo('Create Database');
      await exec('php', ['bin/console', 'doctrine:database:create']);
      success(`Create Darabase`);
      echo('Run Migrations');
      await exec('php', ['bin/console', 'doctrine:migrations:migrate', '-n']);
      success(`Load Fixtures`);
      echo('Load Fixtures');
      await exec('php', ['bin/console', 'doctrine:fixtures:load', '-n']);
      success(`Load Fixtures`);
      break;
  }
};

const uninstall = async (subcommand) => {
  switch (subcommand) {
    case 'js':
    case 'javascript':
      echo('Uninstall NPM Packages');
      await exec('rm', ['-rf', 'node_modules']);
      success('Uninstall NPM Packages');
      break;
    case 'php':
    case 'symfony':
      echo('Uninstall Composer Packages');
      await exec('rm', ['-rf', 'vendor']);
      success('Uninstall Composer Packages');
      break;
    case 'db':
    case 'database':
      echo('Drop Database');
      await exec('php', ['bin/console', 'doctrine:database:drop', '--force']);
      success(`Drop Database`);
      break;
  }
};

const clear = async (subcommand) => {
  switch (subcommand) {
    case 'cache':
      echo('Remove cache files');
      await exec('rm', ['-rf', 'var/cache/dev/*']);
      success(`Remove cache files`);
      break;
    case 'build':
      echo('Remove build artefacts');
      await exec('rm', ['-rf', 'web/react']);
      success('Remove build artefacts');
      break;
    case 'logs':
      echo('Empty logfiles');
      await truncateDir(`${installDir}/var/logs/`, '.log');
      success('Empty logfiles');
      echo('Empty php error log');
      await truncateDir(`/var/log/php/`, '.log');
      success('Empty php error log');
  }
};

const refresh = async (subcommand) => {
  switch (subcommand) {
    case 'db':
    case 'database':
      await refresh('artefacts')
      echo('Drop Database');
      await exec('php', ['bin/console', 'doctrine:database:drop', '--force']);
      success('Drop Database');
      echo('Create Database');
      await exec('php', ['bin/console', 'doctrine:database:create']);
      success('Create Database');
      echo('Run Migrations');
      await exec('php', ['bin/console', 'doctrine:migrations:migrate', '-n']);
      success('Run Migrations');
      echo('Load Fixtures');
      await exec('php', ['bin/console', 'doctrine:fixtures:load', '-n']);
      success('Load Fixtures');
      success(`Succefully completed install ${subcommand}`);
      break;
    case 'artefacts':
      echo('Remove cache files');
      await exec('rm', ['-rf', 'var/cache/dev/*']);
      success(`Remove cache files`);
      echo('Remove build artefacts');
      await exec('rm', ['-rf', 'web/react']);
      success('Remove build artefacts');
      echo('Empty logfiles');
      await truncateDir(`${installDir}/var/logs/`, '.log');
      success('Empty logfiles');
  }
};

const run = async (subcommand) => {
  switch (subcommand) {
    case 'build':
      echo('Build javascript');
      await exec('npm', ['run', 'build']);
      success(`Succefully completed running ${subcommand}`);
      break;
    case 'migrate':
      echo('Run Migrations');
      await exec('php', ['bin/console', 'doctrine:migrations:migrate', '-n']);
      success('Run Migrations');
      break;
    case 'fixtures':
      echo('Load Fixtures');
      await exec('php', ['bin/console', 'doctrine:fixtures:load', '-n']);
      success('Load Fixtures');
      break;
  }
};

const usage = () => {
  echo(`
Symfony

Usage:
  symfony <command> <subcommand>

Commands:
  install
  uninstall
  clear
  run
  refresh
`);
};

const main = (command, subcommand) => {
  switch (command) {
    case 'install':
      install(subcommand);
      break;
    case 'uninstall':
      uninstall(subcommand);
      break;
    case 'clear':
      clear(subcommand);
      break;
    case 'run':
      run(subcommand);
      break;
    case 'refresh':
      refresh(subcommand);
      break;
    default:
      usage();
  }
};

const [command, subcommand] = process.argv.slice(2);

main(command, subcommand);
